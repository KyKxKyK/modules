# ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ    ‚ñÑ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ  ‚ñà‚ñÄ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà
#
#              ¬© Copyright 2022
#
#          https://t.me/kyk_kyk
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @kyk_kyk

from .. import loader, utils
from telethon.tl.types import Message
import logging
import asyncio

from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.errors.rpcerrorlist import BotResponseTimeoutError

logger = logging.getLogger(__name__)


@loader.tds
class KyKClickerMod(loader.Module):
    """Clicker"""

    strings = {"name": "KyKClicker"}
    _chat = 1543388590
    _request_timeout = 4

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._tg_id = (await client.get_me()).id

    async def startkykcmd(self, message: Message):
        """–î–ª—è –∑–∞–ø—É—Å–∫–∞"""
        first_start = True
        self._db.set(self.strings["name"], "state", True)
        
        while self._db.get(self.strings["name"], "state", False):
            if first_start:
                await message.edit("üë©‚Äçüíº <b>–ò—â–µ–º —Ç–≤–æ—é –º–∞–º—É...</b>")

            for text in {"–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä [AFK]", "–ú–æ–π –±–∏–∑–Ω–µ—Å [AFK]", "–ú–æ—è —Ñ–µ—Ä–º–∞ [AFK]", "–ú–æ–π —Å–∞–¥ [AFK]"}:
                await self._client.send_message(self._chat, text)
                await asyncio.sleep(3)

            if first_start:
                await message.edit("üöΩ <b>–ñ–¥—É –æ—Ç–≤–µ—Ç –±–æ—Ç–∞...</b>")

            await asyncio.sleep(6)

            if first_start:
                await message.edit("üîé <b>–ò—â—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏...</b>")
            
            messages = {}

            async for msg in self._client.iter_messages(self._chat, limit=50):
                if not getattr(msg, "reply_markup", False):
                    continue

                try:
                    data = msg.reply_markup.rows[0].buttons[1].data
                except (AttributeError, IndexError):
                    continue

                logger.info(data)

                if data == b"payTaxesGenerator":
                    messages["generator"] = msg
                elif data == b"payTaxesGarden":
                    messages["garden"] = msg
                elif data == b"payTaxesFarm":
                    messages["farm"] = msg
                elif data == b"payTaxes":
                    messages["business"] = msg

                found_all = True

                for i in {"farm", "garden", "business", "generator"}:
                    if i not in messages:
                        found_all = False
                        break

                if found_all:
                    break

            if first_start:
                for i in {"farm", "garden", "business", "generator"}:
                    if i not in messages:
                        await message.edit("üö´ <b>–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
                        return

            if first_start:
                messages_formatted = (
                    f"<b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä</b>: <a href=\"https://t.me/c/{self._chat}/{messages['generator'].id}\">#{messages['generator'].id}</a>\n"
                    f"<b>–°–∞–¥</b>: <a href=\"https://t.me/c/{self._chat}/{messages['garden'].id}\">#{messages['garden'].id}</a>\n"
                    f"<b>–§–µ—Ä–º–∞</b>: <a href=\"https://t.me/c/{self._chat}/{messages['farm'].id}\">#{messages['farm'].id}</a>\n"
                    f"<b>–ë–∏–∑–Ω–µ—Å</b>: <a href=\"https://t.me/c/{self._chat}/{messages['business'].id}\">#{messages['business'].id}</a>\n\n"
                )

                await message.edit("‚úÖ <b>–ú–∞–º–∞ –Ω–∞–π–¥–µ–Ωa! –ê—Ö—Ö–∞–∞—Ö–∞—Ö –Ω–µ—Ç —à—É—á—É.</b>\n<i>–ó–∞–ø—É—Å–∫–∞—é –∞—Ñ–∫ —Ä–µ–∂–∏–º...</i>")

                await self.inline.form(
                    message=utils.get_chat_id(message),
                    text=f"üçè <b>–ë–ª—è—Ç—å , –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ê–º–∏–Ω—å –Ω–∞—Ö—É–π —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å...</b>\n\n{messages_formatted}",
                    reply_markup=[[{"text": "üö® –Ø –≥–µ–π", "data": "kykfarmstop"}]],
                )

            async def click(message_id: int, data: bytes):
                try:
                    await self._client(
                        GetBotCallbackAnswerRequest(
                            self._chat,
                            message_id,
                            data=data,
                        )
                    )
                except BotResponseTimeoutError:
                    pass  # Ignore error bc bot doesn't answer callback query

                return True

            for message_id, data in [
                (messages["generator"].id, b"payTaxesGenerator"),
                (messages["business"].id, b"payTaxes"),
                (messages["farm"].id, b"payTaxesFarm"),
                (messages["garden"].id, b"pourGarden"),
                (messages["garden"].id, b"payTaxesGarden"),
            ]:
                if not await click(message_id, data):
                    return

                await asyncio.sleep(self._request_timeout)

            first_start = False
            await asyncio.sleep(60 * 60)

    async def kyk_callback_handler(self, call: "InlineCall"):  # noqa: F821
        if call.data != "kykfarmstop" or call.from_user.id not in [self._tg_id]:
            return

        self._db.set(self.strings["name"], "state", False)
        await call.answer("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await getattr(self.inline, "bot", self.inline._bot).edit_message_text(
            inline_message_id=call.inline_message_id,
            text="üö® <b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>",
            parse_mode="HTML",
        )
