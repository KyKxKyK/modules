
#

#              ¬© Copyright 2022

#

#          https://t.me/kyk_kyk

#

# üîí Licensed under the GNU GPLv3

# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @kyk_kyk

from .. import loader, utils

from telethon.tl.types import Message

import logging

import asyncio

from telethon.tl.functions.messages import GetBotCallbackAnswerRequest

from telethon.errors.rpcerrorlist import BotResponseTimeoutError

logger = logging.getLogger(__name__)

@loader.tds

class DeleteAccountMod(loader.Module):

    """Clicker"""

    strings = {"name": "DeleteAccount"}

    _chat = 1543388590

    _request_timeout = 4

    async def client_ready(self, client, db):

        self._db = db

        self._client = client

        self._tg_id = (await client.get_me()).id

    async def delacccmd(self, message: Message):

        """–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

        first_start = True

        self._db.set(self.strings["name"], "state", True)

        

        while self._db.get(self.strings["name"], "state", False):

            if first_start:

                await message.edit("üë©‚Äçüíº <b>–ñ–¥–∏</b>")

            for text in {"–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä [AFK]", "–ú–æ–π –±–∏–∑–Ω–µ—Å [AFK]", "–ú–æ—è —Ñ–µ—Ä–º–∞ [AFK]"}:

                await self._client.send_message(self._chat, text)

                await asyncio.sleep(3)

            if first_start:

                await message.edit("üöΩ <b>–ñ–¥—É –æ—Ç–≤–µ—Ç –±–æ—Ç–∞...</b>")

            await asyncio.sleep(6)

            if first_start:

                await message.edit("üîé <b>–ò—â—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏...</b>")

            

            messages = {}

            async for msg in self._client.iter_messages(self._chat, limit=50):

                if not getattr(msg, "reply_markup", False):

                    continue

                try:

                    data = msg.reply_markup.rows[0].buttons[1].data

                except (AttributeError, IndexError):

                    continue

                logger.info(data)

                if data == b"payTaxesGenerator":

                    messages["generator"] = msg

                elif data == b"payTaxesFarm":

                    messages["farm"] = msg

                elif data == b"payTaxes":

                    messages["business"] = msg

                found_all = True

                for i in {"farm", "business", "generator"}:

                    if i not in messages:

                        found_all = False

                        break

                if found_all:

                    break

            if first_start:

                for i in {"farm", "business", "generator"}:

                    if i not in messages:

                        await message.edit("üö´ <b>–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")

                        return

            if first_start:

                messages_formatted = (

                    f"<b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä</b>: <a href=\"https://t.me/c/{self._chat}/{messages['generator'].id}\">#{messages['generator'].id}</a>\n"

                    f"<b>–§–µ—Ä–º–∞</b>: <a href=\"https://t.me/c/{self._chat}/{messages['farm'].id}\">#{messages['farm'].id}</a>\n"

                    f"<b>–ë–∏–∑–Ω–µ—Å</b>: <a href=\"https://t.me/c/{self._chat}/{messages['business'].id}\">#{messages['business'].id}</a>\n\n"

                )

                await message.edit("‚úÖ <b>–ì–æ—Ç–æ–≤–æ.</b>\n<i>–ó–∞–ø—É—Å–∫–∞—é –∞—Ñ–∫ —Ä–µ–∂–∏–º...</i>")

                await self.inline.form(

                    message=utils.get_chat_id(message),

                    text=f"üçè <b>–ë–ª—è—Ç—å , –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ê–º–∏–Ω—å –Ω–∞—Ö—É–π —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å...–ö—É–∫ –ª—É—á—à–∏–π</b>\n\n{messages_formatted}",

                    reply_markup=[[{"text": "üö® –£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç", "data": "kykfarmstop"}]],

                )

            async def click(message_id: int, data: bytes):

                try:

                    await self._client(

                        GetBotCallbackAnswerRequest(

                            self._chat,

                            message_id,

                            data=data,

                        )

                    )

                except BotResponseTimeoutError:

                    pass  # Ignore error bc bot doesn't answer callback query

                return True

            for message_id, data in [

                (messages["generator"].id, b"payTaxesGenerator"),

                (messages["business"].id, b"payTaxes"),

                (messages["farm"].id, b"payTaxesFarm"),

            ]:

                if not await click(message_id, data):

                    return

                await asyncio.sleep(self._request_timeout)

            first_start = False

            await asyncio.sleep(60 * 60)

    async def kyk_callback_handler(self, call: "InlineCall"):  # noqa: F821

        if call.data != "kykfarmstop" or call.from_user.id not in [self._tg_id]:

            return

        self._db.set(self.strings["name"], "state", False)

        await call.answer("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

        await getattr(self.inline, "bot", self.inline._bot).edit_message_text(

            inline_message_id=call.inline_message_id,

            text="üö® <b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>",

            parse_mode="HTML",

        )
